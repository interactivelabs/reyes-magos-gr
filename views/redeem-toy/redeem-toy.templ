package pages

import (
	"fmt"
	"reyes-magos-gr/lib"
	"reyes-magos-gr/store/models"
	layout "reyes-magos-gr/views"
	"reyes-magos-gr/views/components"
	"reyes-magos-gr/views/components/svg"
	"strings"
)

templ RedeemToyForm(toyId int64, code string, errorMsg string) {
	<form
		class="mt-10"
		hx-post="/orders/create"
		hx-on::before-request="beforeRequestHandler(event)"
		hx-target="this"
		hx-swap="outerHTML"
		x-data="codeForm"
		@submit="submit"
	>
		<label class="text-lg leading-6 font-medium text-gray-900">Codigo</label>
		<div class="mt-2">
			<input
				id="code"
				type="text"
				name="code"
				pattern="[A-Z1-9]+"
				class={ components.BaseInputStyles }
				@blur="update"
				required
				value={ code }
			/>
			<input type="hidden" name="toy_id" value={ fmt.Sprint(toyId) }/>
			<p class="mt-2 text-sm text-red-600" x-show="!valid">Un codigo valido es requerido (e.g. A1B2C3)</p>
		</div>
		if errorMsg != "" {
			<div class="rounded-md drop-shadow-xs bg-red-50 p-4 mt-2">
				<div class="flex">
					<div class="shrink-0">
						@svg.ErrorIcon("size-5 text-red-400")
					</div>
					<div class="ml-3">
						<h3 class="text-sm font-medium text-red-800">
							{ errorMsg },
							<a href="/#steps" class=" inline-block ml-1 underline font-bold">Ve aqui como obeter un codigo</a>
						</h3>
					</div>
				</div>
			</div>
		}
		<div class="mt-8 text-right">
			<button type="submit" class={ components.BrandPrimaryButton + " w-full lg:w-auto" }>
				Ordernar Regalo
			</button>
		</div>
	</form>
}

templ AddToCartButton(toyId int64) {
	<div class="mt-8 text-center">
		<button
			class={ components.BrandPrimaryButton }
			hx-post="/admin/cart/add"
			hx-target="this"
			hx-swap="outerHTML"
		>
			Agregar al Carrito
			<input type="hidden" name="toy_id" value={ fmt.Sprint(toyId) }/>
		</button>
	</div>
}

templ RedeemToy(toy models.Toy, code string) {
	@layout.Base() {
		<main class="min-h-screen">
			<div class="mx-auto max-w-2xl pb-24 pt-8 sm:px-6 lg:max-w-7xl lg:px-8">
				<div class="px-4 md:px-0">
					<button class={ components.BrandPrimaryButton + " flex items-center" } onclick="history.back()">
						@svg.ArrowToLeft("h-5 w-5 fill-current")
						<span class="inline-block ml-1 tracking-widest">Regresar</span>
					</button>
				</div>
				<div class="lg:grid lg:auto-rows-min lg:grid-cols-2 lg:gap-x-8">
					<div x-data={ fmt.Sprintf("{ selected: 1, src: '%s' }", toy.Image1) } class="mt-8 lg:col-start-1 lg:row-span-3 lg:row-start-1">
						<h3 class="sr-only">Images</h3>
						<img
							id="toy-image-0"
							:src="src"
							alt={ toy.ToyDescription }
							class="max-h-[600px] m-auto"
						/>
						<div class="px-2 md:px-0 mt-4 grid grid-cols-3 gap-4 lg:gap-8 justify-items-center">
							<img
								id="toy-image-1"
								src={ toy.Image1 }
								alt={ toy.ToyDescription }
								class="rounded-lg cursor-pointer max-h-[150px]"
								x-bind:class="{ 'border-4 border-brand-orange brightness-90': selected === 1 }"
								@click={ fmt.Sprintf("selected = 1; src = '%s'", toy.Image1) }
							/>
							<img
								id="toy-image-2"
								src={ toy.Image2 }
								alt={ toy.ToyDescription }
								class="rounded-lg cursor-pointer max-h-[150px]"
								x-bind:class="{ 'border-4 border-brand-orange brightness-90': selected === 2 }"
								@click={ fmt.Sprintf("selected = 2, src = '%s'", toy.Image2) }
							/>
							<img
								id="toy-image-3"
								src={ toy.Image3 }
								alt={ toy.ToyDescription }
								class="rounded-lg cursor-pointer max-h-[150px]"
								x-bind:class="{ 'border-4 border-brand-orange brightness-90': selected === 3 }"
								@click={ fmt.Sprintf("selected = 3, src = '%s'", toy.Image3) }
							/>
						</div>
					</div>
					<div class="mt-16 md:mt-0 text-center px-4 md:px-0">
						<h2 class="text-xl font-medium text-gray-900">{ toy.ToyName }</h2>
					</div>
					<div class="px-4 md:px-0">
						if lib.IsVolunteersCartEnabled(ctx) {
							@AddToCartButton(toy.ToyID)
						} else {
							@RedeemToyForm(toy.ToyID, code, "")
						}
						<div class="mt-16">
							@components.Accordion() {
								@components.AccordionRow("Edades (años)", true) {
									<p>{ fmt.Sprint(toy.AgeMin) } - { fmt.Sprint(toy.AgeMax) }</p>
								}
								@components.AccordionRow("Categoria", true) {
									<p>{ toy.Category }</p>
								}
								@components.AccordionRow("Descripción", false) {
									<p>{ toy.ToyName }</p>
									<ul class="mt-4">
										for _, item := range strings.Split(toy.ToyDescription, "\n") {
											<li class="mt-4">{ item }</li>
										}
									</ul>
								}
							}
						</div>
					</div>
				</div>
			</div>
		</main>
	}
}
