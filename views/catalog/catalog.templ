package pages

import (
	"fmt"
	"reyes-magos-gr/db/model"
	"reyes-magos-gr/handlers/dtos"
	"reyes-magos-gr/lib"
	layout "reyes-magos-gr/views"
	"reyes-magos-gr/views/components"
	svg "reyes-magos-gr/views/components/svg"
)

script onRemoveFilter(filterValue string) {
	removeFilter(filterValue)
}

const RangeBaseStyles string = "text-sm text-gray-500 absolute -bottom-6"

func getPagingStyles(page int64, i int) string {
	var selected string
	if i == int(page) {
		selected = "text-brand-orange border-brand-orange"
	} else {
		selected = "text-gray-500 hover:border-gray-300 hover:text-gray-700 border-transparent"
	}
	return fmt.Sprintf("inline-flex items-center border-t-2 px-4 pt-4 text-sm font-medium %s", selected)
}

templ AgeRangeFields(name string, value int64) {
	<input
		min="1"
		max="16"
		type="range"
		id={ name }
		name={ name }
		value={ fmt.Sprint(value) }
		class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointe"
	/>
	<span class={ RangeBaseStyles + " start-0" }>1</span>
	<span class={ RangeBaseStyles + " start-1/4 -translate-x-1/2 rtl:translate-x-1/2" }>4</span>
	<span class={ RangeBaseStyles + " start-2/4 -translate-x-1/2 rtl:translate-x-1/2" }>8</span>
	<span class={ RangeBaseStyles + " start-3/4 -translate-x-1/2 rtl:translate-x-1/2" }>12</span>
	<span class={ RangeBaseStyles + " end-0" }>16</span>
}

templ FilterPill(filter_label string, filter_value string) {
	<div class="-my-1 flex flex-wrap items-center">
		<span class="m-1 inline-flex items-center rounded-full border border-gray-200 bg-white py-1.5 pl-3 pr-2 text-sm font-medium text-gray-900">
			<span>{ filter_label }</span>
			<button
				type="button"
				onclick={ onRemoveFilter(filter_value) }
				class="ml-1 inline-flex h-4 w-4 flex-shrink-0 rounded-full p-1 text-gray-400 hover:bg-gray-200 hover:text-gray-500"
			>
				<span class="sr-only">Remove filter for { filter_label }</span>
				<svg class="h-2 w-2" stroke="currentColor" fill="none" viewBox="0 0 8 8">
					<path stroke-linecap="round" stroke-width="1.5" d="M1 1l6 6m0-6L1 7"></path>
				</svg>
			</button>
		</span>
	</div>
}

templ Catalog(
	toys []model.Toy,
	categories []string,
	page int64,
	pages int64,
	pageSize int64,
	count int64,
	currentQuery string,
	categoryFilters []string,
	ageMin int64,
	ageMax int64,
	pageNumberlinks []dtos.CatalogLink,
	pageSizeLinks []dtos.CatalogLink,
) {
	@layout.Base() {
		<main>
			<section id="catalog" class="relative isolate py-20 lg:px-8 bg-white">
				<h1 class="text-4xl font-extralight tracking-tight text-center mb-20">Escoje un juguete</h1>
				<div class="mx-auto max-w-3xl px-4 sm:px-6 lg:max-w-7xl lg:px-8">
					<!-- Filters -->
					<section
						x-data="{ expanded: false }"
						aria-labelledby="filter-heading"
						class="grid items-center border-b border-t border-gray-200"
					>
						<h2 id="filter-heading" class="sr-only">Filtros</h2>
						<div class="relative col-start-1 row-start-1 py-4">
							<div class="mx-auto flex max-w-7xl space-x-6 divide-x divide-gray-200 px-4 text-sm sm:px-6 lg:px-8">
								<div>
									<button
										type="button"
										aria-controls="filters-panel"
										:aria-expanded="expanded"
										@click="expanded = !expanded"
										class="group flex items-center font-medium text-gray-700"
									>
										@svg.FilterEmpty("h-4 w-4 mr-4 fill-current")
										Filtros
									</button>
								</div>
								<div class="pl-6">
									<button type="button" class="text-gray-500" onclick="clearFilters()">Limpiar Filtros</button>
								</div>
							</div>
						</div>
						if len(categoryFilters) > 0 || ageMin > 1 || ageMax > 1 {
							<div class="bg-gray-100">
								<div class="mx-auto max-w-7xl px-4 py-3 sm:flex sm:items-center sm:px-6 lg:px-8">
									if ageMin > 1 {
										@FilterPill(fmt.Sprintf("Edad Minima: %d", ageMin), "age_min")
									}
									if ageMax > 1 {
										@FilterPill(fmt.Sprintf("Edad Maxima: %d", ageMax), "age_max")
									}
									for _, filter := range categoryFilters {
										@FilterPill(filter, filter)
									}
								</div>
							</div>
						}
						<div id="filters-panel" class="border-t border-gray-200 py-8" x-show="expanded" x-collapse>
							<form id="filters-form" onsubmit="event.preventDefault();updateFilters();">
								<div class="mx-auto max-w-7xl gap-x-6 px-4 text-sm sm:flex sm:px-6 md:gap-x-8 lg:px-8">
									<div class="w-full sm:w-auto">
										<div class="space-y-6 mb-8 sm:space-y-4 relative">
											<label for="age_min" class="block mb-2 font-bold">Edad Minima</label>
											@AgeRangeFields("age_min", ageMin)
										</div>
										<div class="space-y-6 mb-8 sm:space-y-4 relative">
											<label for="age_max" class="block mb-2 font-bold">Edad Maxima</label>
											@AgeRangeFields("age_max", ageMax)
										</div>
									</div>
									<div class="mt-12 sm:mt-0">
										<legend class="block font-bold mb-6">Categorias</legend>
										<div class="grid auto-rows-min grid-cols-1 gap-y-4 sm:grid-cols-2 md:grid-cols-3 md:gap-x-8 lg:grid-cols-4">
											for i, category := range categories {
												<div class="flex items-center text-base sm:text-sm">
													<input
														name="category[]"
														type="checkbox"
														value={ category }
														id={ fmt.Sprintf("category-%d", i) }
														class="h-4 w-4 flex-shrink-0 rounded border-gray-300 text-brand-orange focus:ring-brand-orange"
													/>
													<label for={ fmt.Sprintf("category-%d", i) } class="ml-3 min-w-0 flex-1 text-gray-600">
														{ category }
													</label>
												</div>
											}
										</div>
									</div>
								</div>
								<div class="w-full py-4 px-4 sm:px-6 lg:px-8">
									<label for="page" class="text-sm font-bold mb-6">
										<span class="inline-block mr-2">Numero de resultados:</span>
										@components.LinksListbox(fmt.Sprint(pageSize), fmt.Sprintf("%d Resultados por pagina", pageSize), fmt.Sprint(pageSize), pageSizeLinks)
									</label>
								</div>
								<div class="text-right">
									<button type="submit" class={ components.BrandPrimaryButtonSmall }>Aplicar Filtros</button>
								</div>
							</form>
						</div>
					</section>
					<!-- Catalog -->
					<div class="columns md:columns-4 gap-12 space-y-12 my-8">
						for _, toy := range toys {
							<a class="inline-block mt-8" href={ templ.URL(fmt.Sprintf("redeem/%d", toy.ToyID)) }>
								<div class="group relative flex flex-col overflow-hidden">
									<div class="group-hover:opacity-75">
										<img src={ toy.Image1 } alt={ toy.ToyDescription } class="w-full"/>
									</div>
									<div class="flex flex-1 flex-col mt-6">
										<h3 class="text-lg font-bold line-clamp-2">
											<span aria-hidden="true" class="absolute inset-0"></span>
											{ toy.ToyName }
										</h3>
										<div class="flex-1 flex justify-between mt-4">
											<div class="text-center">
												<div class="text-xs text-gray-500 font-extralight">Categoria</div>
												<div>{ toy.Category }</div>
											</div>
											<div class="text-center">
												<div class="text-xs text-gray-500 font-extralight">Edades</div>
												<div>{ fmt.Sprint(toy.AgeMin) } a { fmt.Sprint(toy.AgeMax) } a√±os</div>
											</div>
										</div>
									</div>
								</div>
							</a>
						}
					</div>
					<!-- Paging -->
					<nav class="flex justify-between border-t border-gray-200 px-4 sm:px-0">
						<div class="-mt-px flex w-0 flex-1">
							if page > 1 {
								<a
									href={ templ.URL(lib.GetPaginationLink(currentQuery, int(page-1), pageSize)) }
									class="inline-flex items-center border-t-2 border-transparent pr-1 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
								>
									<svg class="mr-3 h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
										<path
											fill-rule="evenodd"
											clip-rule="evenodd"
											d="M18 10a.75.75 0 01-.75.75H4.66l2.1 1.95a.75.75 0 11-1.02 1.1l-3.5-3.25a.75.75 0 010-1.1l3.5-3.25a.75.75 0 111.02 1.1l-2.1 1.95h12.59A.75.75 0 0118 10z"
										></path>
									</svg>
									Anterior
								</a>
							}
						</div>
						<div class="hidden md:-mt-px md:flex">
							for i := 1; i <= int(pages); i++ {
								<a
									href={ templ.URL(lib.GetPaginationLink(currentQuery, i, pageSize)) }
									class={ getPagingStyles(page, i) }
								>
									{ fmt.Sprint(i) }
								</a>
							}
						</div>
						<div class="flex mt-2 md:hidden">
							@components.LinksListbox(fmt.Sprint(page), fmt.Sprintf("Pagina %d de %d", page, pages), fmt.Sprint(page), pageNumberlinks)
						</div>
						<div class="-mt-px flex w-0 flex-1 justify-end">
							if page < pages {
								<a
									href={ templ.URL(lib.GetPaginationLink(currentQuery, int(page+1), pageSize)) }
									class="inline-flex items-center border-t-2 border-transparent pl-1 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
								>
									Siguiente
									<svg class="ml-3 h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
										<path
											fill-rule="evenodd"
											clip-rule="evenodd"
											d="M2 10a.75.75 0 01.75-.75h12.59l-2.1-1.95a.75.75 0 111.02-1.1l3.5 3.25a.75.75 0 010 1.1l-3.5 3.25a.75.75 0 11-1.02-1.1l2.1-1.95H2.75A.75.75 0 012 10z"
										></path>
									</svg>
								</a>
							}
						</div>
					</nav>
					<!-- Paging labels -->
					<div class="mt-6 text-center text-sm font-medium text-gray-500">
						Mostrando del
						<div class="text-base font-bold mx-2 inline-block">
							{ fmt.Sprint(((page - 1) * pageSize) + 1) }
						</div>
						a
						<div class="text-base font-bold mx-2 inline-block">
							if count <= (page * pageSize) {
								{ fmt.Sprint(count) }
							} else {
								{ fmt.Sprint(page * pageSize) }
							}
						</div>
						de
						<div class="text-base font-bold mx-2 inline-block">
							{ fmt.Sprint(count) }
						</div>
						resultados
					</div>
				</div>
			</section>
			<!-- Back to top btn -->
			<div
				x-data="{ showBackToTop: false }"
				@showbacktotopbtn.window="showBackToTop = true"
				@hidebacktotopbtn.window="showBackToTop = false"
			>
				<div
					x-show="showBackToTop"
					x-transition:enter="ease-out duration-100"
					x-transition:enter-start="opacity-0"
					x-transition:enter-end="opacity-100"
					x-transition:leave="ease-in duration-100"
					x-transition:leave-start="opacity-100"
					x-transition:leave-end="opacity-0"
					class="fixed bottom-6 right-2 md:right-6 z-10"
				>
					<button
						type="button"
						onclick="window.scrollTo({ top: 0, behavior: 'smooth' })"
						aria-hidden="true"
						title="Back to Top"
					>
						@svg.ArrowToTop("h-8 w-8 fill-current")
					</button>
				</div>
			</div>
		</main>
	}
}
