{
  "version": 3,
  "sources": ["../../assets/js/components/search-box.ts", "../../assets/js/admin/codes.ts", "../../assets/js/admin/orders.ts", "../../assets/js/admin/toys_form.ts"],
  "sourcesContent": ["/// <reference types=\"alpinejs\" />\nimport type {\n  Alpine as AlpineType,\n  AlpineComponent,\n  Magics,\n  ElementWithXAttributes,\n  InferInterceptors,\n  Stores,\n  XDataContext,\n} from \"alpinejs\";\n\ndeclare global {\n  var Alpine: AlpineType;\n}\n\nexport interface SearchBoxSelectEvent extends Event {\n  detail: {\n    item: SearchBoxItem;\n  };\n}\n\nexport interface SearchBoxItem {\n  Label: string;\n  Value: string;\n}\n\ninterface SearchBoxType {\n  Items: SearchBoxItem[];\n  ItemsFiltered: SearchBoxItem[];\n  ItemActive: SearchBoxItem | null;\n  ItemSelected: SearchBoxItem | null;\n  Id: string;\n  Search: string;\n  SearchIsEmpty(): boolean;\n  ItemIsActive(item: SearchBoxItem): boolean;\n  ItemActiveNext(): void;\n  ItemActivePrevious(): void;\n  ScrollToActiveItem(): void;\n  SearchItems(): void;\n  SelectItem(item: SearchBoxItem): void;\n  AddItem(): void;\n}\n\nfunction getSearchBoxClass() {\n  return class SearchBox implements Magics<AlpineComponent<SearchBoxType>> {\n    // MAGIC METHODS\n    // Alpine magic properties and methods\n    $data: InferInterceptors<AlpineComponent<SearchBoxType>>;\n    $dispatch: (event: string, detail?: any) => void;\n    $el: HTMLElement;\n    $id: (name: string, key?: number | string | null) => string;\n    $nextTick: (callback?: () => void) => Promise<void>;\n    $refs: Record<string, HTMLElement>;\n    $root: ElementWithXAttributes<HTMLElement>;\n    $store: Stores;\n    $watch: <\n      K extends string,\n      V extends K extends keyof SearchBoxType | keyof XDataContext\n        ? AlpineComponent<SearchBoxType>[K]\n        : any,\n    >(\n      property: K,\n      callback: (newValue: V, oldValue: V) => void,\n    ) => void;\n    destroy: () => void;\n    // CLASS PROPERTIES\n    name: string;\n    Id: string;\n    Items: SearchBoxItem[];\n    ItemsFiltered: SearchBoxItem[];\n    ItemActive: SearchBoxItem | null;\n    ItemSelected: SearchBoxItem | null;\n    Search: string;\n    fetchItemsUrl: string;\n    // Constructor, initialize properties\n    constructor(url: string, name: string) {\n      this.Id = name + Date.now().toString();\n      this.name = name;\n      this.Items = [];\n      this.ItemsFiltered = [];\n      this.ItemActive = null;\n      this.ItemSelected = null;\n      this.Search = \"\";\n      this.fetchItemsUrl = url;\n    }\n    // Alphine lifecycle methods\n    async init() {\n      this.$watch(\"Search\", () => this.SearchItems());\n      this.$watch(\"ItemSelected\", (item: SearchBoxItem) =>\n        this.SelectItem(item),\n      );\n      this.Items = await (await fetch(this.fetchItemsUrl)).json();\n    }\n    // CLASS METHODS\n    SearchIsEmpty() {\n      return this.Search.length == 0;\n    }\n    ItemIsActive(item: SearchBoxItem) {\n      return !!(this.ItemActive && this.ItemActive.Value == item.Value);\n    }\n    ClearState() {\n      this.ItemsFiltered = [];\n      this.ItemActive = null;\n      this.Search = \"\";\n    }\n    ItemActiveNext() {\n      if (!this.ItemActive) return;\n      let index = this.ItemsFiltered.indexOf(this.ItemActive);\n      if (index < this.ItemsFiltered.length - 1) {\n        this.ItemActive = this.ItemsFiltered[index + 1];\n        this.ScrollToActiveItem();\n      }\n    }\n    ItemActivePrevious() {\n      if (!this.ItemActive) return;\n      let index = this.ItemsFiltered.indexOf(this.ItemActive);\n      if (index > 0) {\n        this.ItemActive = this.ItemsFiltered[index - 1];\n        this.ScrollToActiveItem();\n      }\n    }\n    ScrollToActiveItem() {\n      if (this.ItemActive) {\n        const activeElement = document.getElementById(\n          this.ItemActive.Value + \"-\" + this.Id,\n        );\n        if (!activeElement) return;\n\n        const newScrollPos =\n          activeElement.offsetTop +\n          activeElement.offsetHeight -\n          this.$refs.ItemsList.offsetHeight;\n        if (newScrollPos > 0) {\n          this.$refs.ItemsList.scrollTop = newScrollPos;\n        } else {\n          this.$refs.ItemsList.scrollTop = 0;\n        }\n      }\n    }\n    SearchItems() {\n      if (this.SearchIsEmpty()) {\n        this.ClearState();\n        return;\n      }\n      if (!this.SearchIsEmpty()) {\n        const searchTerm: string = this.Search.replace(/\\*/g, \"\").toLowerCase();\n        this.ItemsFiltered = this.Items.filter((item: SearchBoxItem) =>\n          item.Label.toLowerCase().includes(searchTerm),\n        );\n        this.ScrollToActiveItem();\n      }\n    }\n    SelectItem(item: SearchBoxItem) {\n      if (!item) return;\n      this.$dispatch(`searchbox-item-selected-${this.name}`, { item });\n      this.ClearState();\n    }\n    AddItem() {\n      if (this.SearchIsEmpty()) return;\n      const item = { Label: this.Search, Value: this.Search };\n      this.Items.push(item);\n      this.$dispatch(`searchbox-item-selected-${this.name}`, { item });\n      this.ClearState();\n    }\n  };\n}\n\ndocument.addEventListener(\"alpine:init\", () => {\n  const createSearchBox = (url: string, name: string) => {\n    const SearchBox = getSearchBoxClass();\n    return new SearchBox(url, name);\n  };\n\n  Alpine.data(\"SearchBox\", createSearchBox);\n});\n", "const form = document.getElementById(\"remove_code_form\");\n\n// This is done because of the styling on the checkbox there a styled input and a hidden checkbox input\nform?.addEventListener(\"change\", (e) => {\n  const target = e.target as HTMLInputElement;\n  if (target.name === \"volunteer_code_ids\") {\n    const codeCheckbox = target.nextElementSibling as HTMLInputElement;\n    codeCheckbox.checked = target.checked;\n  }\n});\n\nglobalThis.selectAllUnsigned = () => {\n  const assignCodesForm = document.getElementById(\"assign-codes-form\");\n  const checkboxes = assignCodesForm?.getElementsByTagName(\"input\");\n  if (!checkboxes || !checkboxes.length) return;\n  for (let i = 0; i < checkboxes?.length; i++) {\n    if (checkboxes[i].type === \"checkbox\") {\n      checkboxes[i].checked = true;\n    }\n  }\n};\n", "globalThis.orderCompletedToggleClick = (btn: HTMLButtonElement) => {\n  btn.classList.toggle(\"bg-indigo-600\");\n  btn.classList.toggle(\"bg-gray-200\");\n  btn.children[0].classList.toggle(\"translate-x-0\");\n  btn.children[0].classList.toggle(\"translate-x-5\");\n  const completedInput = btn.previousElementSibling as HTMLInputElement;\n  completedInput.value = completedInput.value === \"1\" ? \"0\" : \"1\";\n};\n", "import type { SearchBoxSelectEvent } from \"../components/search-box\";\n\nwindow.addEventListener(\"SearchBox:ItemSelected:category\", (event: Event) => {\n  const searchBoxEvent = event as SearchBoxSelectEvent;\n  const item = searchBoxEvent.detail?.item;\n  if (!item) return;\n\n  const categoryInput = document.getElementById(\"category\") as HTMLInputElement;\n  const category = item.Value;\n\n  const currentCategories = categoryInput.value.split(\",\");\n  if (currentCategories.includes(category)) return;\n\n  const newCategories = [...currentCategories, category];\n  categoryInput.value = newCategories.join(\",\");\n});\n\ndocument.addEventListener(\"alpine:init\", () => {\n  Alpine.data(\"CategoryWithSearch\", (currentValue: string) => ({\n    category: currentValue,\n    setNewCategory(event: SearchBoxSelectEvent) {\n      const item = event.detail?.item;\n      if (!item) return;\n\n      const newCategory = item.Value;\n      const currentCategories = !!this.category ? this.category.split(\",\") : [];\n      if (currentCategories.includes(newCategory)) return;\n\n      const newCategories = [...currentCategories, newCategory];\n      this.category = newCategories.join(\",\");\n    },\n    removeCategory(category: string) {\n      const newCategories = this.category\n        .split(\",\")\n        .filter((c: string) => c !== category);\n      if (newCategories.length > 0) {\n        this.category = newCategories.join(\",\");\n        return;\n      }\n      this.category = \"\";\n    },\n  }));\n});\n"],
  "mappings": "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",
  "names": []
}
